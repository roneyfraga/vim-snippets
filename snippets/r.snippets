# library
snippet lib
	library(${1:package})
# require
snippet req
	require(${1:package})
# source 
snippet sou
	source('${1:file}')
# install.packages
snippet install
	install.packages(c('${1:package.name}'), dependencies = TRUE)
# magrittR pipe
snippet pipe
	%>>%  
# pipeR  pipe
snippet pp
	%>%  
snippet p
	|>  
snippet o
	->  
# If Condition
snippet if
	if(${1:condition}){
	    ${2:}
	}
snippet els
	else {
	    ${1:}
	}
snippet whi
	while(${1:condition}){
	    ${2:}
	}
# For Loop
snippet for
	for(${1:i} in ${2:range}){
	    ${3:}
	}
# lambda
snippet lam
	{
	  \(${1:x})
	}()
# function
snippet fun
	function(${1:x})
# repeat
snippet rep
	repeat{
	    ${1:}
	    if(${2:condition}) break
	}
# progress_bar
snippet pro
	progress::progress_bar$new(format = "[:bar] :current/:total (:percent)", total = length(${1:length()}))
# return
snippet ret
	return(${1})
# dataframes, lists, etc
snippet df
	${1:name}[${2:rows}, ${3:cols}]
snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})
# apply functions
snippet app
	apply(${1:array}, ${2:margin}, ${3:function})
snippet lap
	lapply(${1:list}, ${2:function})
snippet sap
	lapply(${1:list}, ${2:function})
snippet vap
	vapply(${1:list}, ${2:function}, ${3:type})
# snippet map
# 	mapply(${1:function}, ${2:...}) ${3:}
snippet tap
	tapply(${1:vector}, ${2:index}, ${3:function})
snippet rap
	rapply(${1:list}, ${2:function})
# plot functions
snippet plo
	plot(${1:x}, ${2:y})
snippet img
	${1:(jpeg,bmp,png,tiff)}(filename = "${2:filename}", width = ${3}, height = ${4}, unit = "${5}")
	${6:plot}
	dev.off()
# read
snippet read
	read.${1:csv}(
				'${2:file}',
				header = ${3:TRUE/FALSE},
				sep = '${4:,}',
				dec = '${5:.}',
				row.names = ${6:TRUE/FALSE}
				)
# write
snippet write
	write.${1:csv}(
				${2:x},
				file = '${3:}',
				sep = '${4:,}',
				row.names = ${5:TRUE/FALSE},
				col.names = ${6:TRUE/FALSE},
				na = '${7:NA}'
				)
# subset
snippet subset
	subset(
			${1:data},
			${2:subset},
			${3:select},
		      )
snippet ggp
	ggplot2::ggplot(${1:data}, aes(${2:aesthetics}))
# import
snippet	imp
	rio::import('rawfiles/${1:}')
# export
snippet	exp
	rio::export(${1:data}, 'rawfiles/${2:file}')
# dplyr::
snippet dpl
	dplyr::${1} 
# glimpse
snippet gli
	dplyr::glimpse(${1})
# select
snippet sel
	dplyr::select(${1})
# arrange
snippet arr
	dplyr::arrange(${1})
# filter
snippet fil
	dplyr::filter(${1})
# group_by
snippet gro
	dplyr::group_by(${1})
# summarise
snippet sum
	dplyr::summarise(${1})
# mutate
snippet mut
	dplyr::mutate(${1})
# count
snippet cou
	dplyr::count(${1}, sort = T)
# tally
snippet tal
	dplyr::tally(${1}, sort = ${2})
# rename
snippet ren
	dplyr::rename(${1} = ${2})
# relocate
snippet rel
	dplyr::relocate(${1})
# relocate
snippet rec
	dplyr::recode(${1})
# pull
snippet pul
	dplyr::pull(${1})
# desc
snippet des
	dplyr::desc(${1})
# tibble::
snippet tib
	tibble::${1}
snippet ast
	tibble::as_tibble() ${1}
snippet col
	tibble::collect()
# left_join
snippet lef
	dplyr::left_join(${1})
# right_join
snippet rig
	dplyr::right_join(${1})
# full_join
snippet ful
	dplyr::full_join(${1})
# distinct
snippet dis
	dplyr::distinct(${1:var_name,}.keep_all = TRUE)
# ungroup
snippet ung
	dplyr::ungroup()
# dplyr::rowwise
snippet row
	dplyr::rowwise(${1})
# dplyr::case_when
snippet cas
	dplyr::case_when(${1})
# dplyr::across
snippet acr
	dplyr::across(${1})
# bind_rows bind_cols
snippet bin
	dplyr::bind_${1:rows/cols}(${2})
# dplyr::show_query 
snippet sho
	dplyr::show_query()
# tidyr
snippet tid
	tidyr::${1}
# tidyr::separate_rows
snippet nes
	tidyr::nest(${1})
snippet unn
	tidyr::unnest(${1})
# tidyr::separate_rows
snippet sep
	tidyr::separate_rows(${1}, sep = ${2})
# print
snippet pri
	print(n = ${1:Inf/10/50})
# dbplyr
snippet dbp
	dbplyr::${1}
# tidygraph::as_tbl_graph
snippet gra
	tidygraph::as_tbl_graph(${1})
# tidygraph::activate
snippet act
	tidygraph::activate(${1:nodes/edges})
# vector
snippet vec
	vector(mode = '${1:numeric/list/character/logical}', length = ${2})
# janitor::clean_names
snippet cle
	janitor::clean_names()
# lobstr::mem_used
snippet men
	lobstr::mem_used(${1})
# purrr::
snippet pur
	purrr::${1}
# purrr::map
snippet map
	purrr::map(${1})
# purrr::map_
snippet map_
	purrr::map_${1:chr/dbl/int/lgl/dfc/lgl/dfc/at/if}(${2})
# purrr::pmap
snippet pma
	purrr::pmap(${1})
# purrr::pmap_
snippet pma_
	purrr::pmap_${1:chr/dbl/int/lgl/dfc/lgl/dfc/at/if}(${2})
# purrr::imap
snippet ima
	purrr::imap(${1})
# purrr::imap_
snippet ima_
	purrr::imap_${1:chr/dbl/int/lgl/dfc/lgl/dfc/at/if}(${2})
# purrr::flatte_
snippet fla_
	purrr::flatten_${1:chr/dbl/int/lgl/dfc}(${2})
# walk
snippet wal
	purrr::walk(${1})
# pluck
snippet plu
	purrr::pluck(${1})
# safely
snippet saf
	purrr::safely(${1})
# keep
snippet kee
	purrr::keep(${1})
# discard
snippet dis
	purrr::discard(${1})
# tictoc::tic
snippet tic
	tictoc::tic()
# tictoc::toc
snippet toc
	tictoc::toc()
snippet ins
	renv::install('${1}')
# dtplyr
snippet dtp
	dtplyr::${1}
# dtplyr::lazy_dt
snippet laz
	dtplyr::lazy_dt()
# data.table::
snippet dat
	data.table::${1}
# data.table::fread
snippet fre
	data.table::fread(${1})
# data.table::fwrite
snippet fwr
	data.table::fwrite(${1})
# data.table::setDT
snippet set
	data.table::setDT(${1})
# data.table::getDTthreads
snippet dtt
	data.table::getDTthreads(${1})
# data.table::as.data.table
snippet adt
	data.table::as.data.table(${1})
# tidyfast::
snippet tdf
	tidyfast::${1}
# tidytable::
snippet tdt
	tidytable::${1}
# string 
snippet smt
	stringr::str_trim(stringi::stri_trans_general(tolower(${1}), "Latin-ASCII"))
snippet her
	here::here(${1})
snippet set
	purrr::set_names(${1})
# ----------------------------------------
# Markdown functions
# rmarkdown::paged_table
snippet pag
	rmarkdown::paged_table()
# kable table
snippet kab
	knitr::kable()
# datatable hide collumn
snippet dth
	DT::datatable(
		rownames = FALSE,
		filter = 'bottom',
		extensions = 'Buttons', 
		options = list(
					dom = 'Bfrtip', pageLength = ${1},
                    columnDefs = list(list(visible = FALSE, targets = c(${2}))), 
                    buttons = list(list(extend = 'colvis', columns = c(${3})))
                    ))
# datatable download button
snippet dtd
  DT::datatable(
      extensions = 'Buttons', 
      rownames = F, 
      options = list(
                  dom = 'Bfrtip', 
                  pageLength = 10, 
                  buttons = list(list(
                                      extend = 'collection', 
                                      buttons = list(list(extend = 'csv', filename = 'data'), 
                                                      list(extend = 'excel', filename = 'data')), 
                                                      text = 'Download'))))  
# ----------------------------------------
snippet yaml
	---
	title: "${1}"
	date: "today"
	date-format: iso 
	author:
	  - name: Roney Fraga Souza
	    affiliations:
	      - name: Universidade Federal de Mato Grosso
	format: 
	  html: 
	    toc: true 
	    toc-location: right 
	    fig-width: 8 
	    fig-height: 4 
	    code-fold: true 
	    theme: solar 
	    code-line-numbers: true
	  revealjs: 
	    slide-number: true
	    highlight-style: tango
	    code-line-numbers: true
	    chalkboard: 
	      buttons: true
	    footer: <https://roneyfraga.com>
	  pdf:
	    documentclass: article
	    papersize: a4
	    lof: false
	    lot: false
	    toc: false
	    number-sections: true
	    code-line-numbers: true
	    highlight-style: tango
	    colorlinks: true
	    geometry:
	      - top=30mm
	      - left=20mm
	      - heightrounded
	  docx:
	    number-sections: true
	    highlight-style: tango 
	    prefer-html: true
	    # reference-doc: template-ms-word.docx
	lang: pt
	# bibliography: references.bib
	# csl: abnt-ipea.csl
	---

snippet zet
	---
	title: "${1}"
	date: "today"
	date-format: iso 
	bibliography: aa-references.bib
	keywords:
	---

# ----------------------------------------
# quarto revealjs

snippet panel-tabset
	::: {.panel-tabset}
	### ${1}
	:::

snippet callout
	::: {.callout-${1:note/warning/important/tip/causion} collapse="false" appearance="default", icons=false}
	${2}
	:::

snippet columns
	::: columns
	::: {.column width="50%"}
	:::
	::: {.column width="50%"}
	:::
	:::

snippet rows
	::: rows
	::: {.row height="50%"}
	:::
	::: {.row height="50%"}
	:::
	:::

snippet aside
	::: aside
	${1}
	:::

snippet notes
	:::{.notes}
	${1}
	:::

snippet footer
	::: footer
	${1}
	:::

snippet text-block
	:::{style="font-size: 100%; text-align: left; line-height: 1.0em; color: black; "}
	${1}
	:::

snippet text-inline
	{style="font-size: 100%; text-align: left; line-height: 1.0em; color: black; "}

snippet text-bigger
	::: {.r-fit-text}
	${1}
	:::

snippet fig
	![](${1}){#fig-crossref width="100%" height="100%" fig-align="center" fig-alt="Figure Title"} 

snippet fig-stretch
	![](${1}){#fig-crossref .r-stretch fig-alt="Figure Title"} 

snippet chunk
	#| label: ${1}
	#| eval: false/true
	#| echo: true/true
	#| output: true/false/axis
	#| code-fold: show/true/false
	#| warning: false
	#| error: false
	#| include: true

snippet chunk-table
	#| eval: false/true
	#| echo: true/true
	#| output: true/false/axis
	#| code-fold: show/true/false
	#| warning: false
	#| error: false
	#| include: true
	#| label: tbl-${1}
	#| tbl-cap: Table Title
	#| tbl-subcap: Table Subtitle
	#| tbl-cap-location: top/bottom/margin
	#| tbl-colwidths: auto

snippet chunk-fig
	#| eval: false/true
	#| echo: true/true
	#| output: true/false/axis
	#| code-fold: show/true/false
	#| warning: false
	#| error: false
	#| include: true
	#| fig-align: default/left/right/center
	#| fig-cap-location: top/bottom/margin
	#| fig-width: 
	#| fig-height: 
	#| fig-format: retina/png/jpeg/svg/pdf
	#| fig-dpi: 
	#| label: fig-${1}
	#| fig-cap: Figue Caption
	#| fig-alt: Figure Subtitle

